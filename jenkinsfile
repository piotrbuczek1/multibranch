pipeline {
    agent any

    tools {
        maven 'mvn-jenkins'
    }

    parameters {
        string(name: 'BRANCH_TO_BUILD', defaultValue: 'master', description: 'Gałąź Git do zbudowania')
        booleanParam(name: 'RUN_DEPLOY', defaultValue: false, description: 'Czy uruchomić krok Deploy (java -jar)?')
    }

    environment {
        MY_PROJECT_NAME = 'simple-java-maven-app'
    }

    stages {
        stage('Checkout') {
             steps {
                echo "Pobieranie kodu dla gałęzi: ${params.BRANCH_TO_BUILD}..."
                git(
                    url: 'https://github.com/jenkins-docs/simple-java-maven-app.git',
                    branch: params.BRANCH_TO_BUILD
                )
                echo "Kod pobrany dla projektu: ${env.MY_PROJECT_NAME}"
            }
        }

        stage('Build & Test') {
            steps {
                script {
                    echo "Rozpoczynanie budowania i testowania za pomocą Mavena ('mvn-jenkins')..."
                    try {
                        if (isUnix()) {
                            sh "'${tool('mvn-jenkins')}/bin/mvn' clean package"
                        } else {
                            bat "\"${tool('mvn-jenkins')}\\bin\\mvn.cmd\" clean package"
                        }
                        echo "Maven zakończył działanie pomyślnie."
                    } catch (Exception e) {
                        error "Budowanie Maven nie powiodło się: ${e.getMessage()}"
                    }
                }
            }
            post {
                 always {
                    echo "Publikowanie raportów z testów..."
                    junit(testResults: 'target/surefire-reports/*.xml', allowEmptyResults: true)
                 }
            }
        }

        stage('Host Tool Example (date)') {
             steps {
                script {
                    echo "Uruchamianie narzędzia 'date' dostępnego bezpośrednio na agencie..."
                    if (isUnix()) {
                        echo "System Unix-like, uruchamiam 'date':"
                        sh 'date'
                    } else {
                        echo "System Windows, uruchamiam 'Get-Date' (PowerShell):"
                        powershell 'Get-Date -Format g'
                    }
                    echo "Zakończono uruchamianie narzędzia 'date'."
                }
            }
        }

        stage('Deploy') {
            when { expression { params.RUN_DEPLOY == true } }
            steps {
                script {
                    echo "Rozpoczynanie deploymentu (uruchomienie JAR)..."
                    // Zakładamy, że JAR jest w target/ - odczyt ścieżki usunięty dla uproszczenia
                    if (isUnix()) {
                        echo "Uruchamianie JAR na Unix: java -jar target/*.jar"
                        sh "java -jar target/*.jar"
                    } else {
                        echo "Uruchamianie JAR na Windows: java -jar target/*.jar"
                        bat "java -jar target\\*.jar"
                    }
                    echo "Polecenie uruchomienia JAR zostało wykonane (aplikacja może nadal działać)."
                }
            }
        }

        stage('Archive') {
             steps {
                 echo "Archiwizowanie artefaktu z target/..."
                 archiveArtifacts(artifacts: 'target/*.jar', fingerprint: true)
             }
        }

    } 

    post {
        always {
            echo 'Pipeline zakończony.'
            cleanWs()
        }
        success {
            echo 'Pipeline zakończony sukcesem!'
        }
        failure {
            echo 'Pipeline zakończony porażką!'
        }
    } 

} 
